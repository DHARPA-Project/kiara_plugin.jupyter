{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"kiara plugin: jupyter","text":"<p>This package contains a set of commonly used/useful modules, pipelines, types and metadata schemas for Kiara.</p>"},{"location":"#description","title":"Description","text":"<p>Jupyter integration for kiara</p>"},{"location":"#package-content","title":"Package content","text":""},{"location":"#links","title":"Links","text":"<ul> <li>Documentation: https://DHARPA-Project.github.io/kiara_plugin.jupyter</li> <li>Code: https://github.com/DHARPA-Project/kiara_plugin.jupyter</li> </ul>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Package contents</li> <li>Usage</li> <li>Development</li> <li>API reference</li> </ul>"},{"location":"development/","title":"Development","text":""},{"location":"development/#prepare-development-environment","title":"Prepare development environment","text":""},{"location":"development/#using-conda-recommended","title":"Using conda (recommended)","text":"<pre><code>conda create -n jupyter python=3.9\nconda activate jupyter\nconda install -c conda-forge mamba   # this is optional, but makes everything install related much faster, if you don't use it, replace 'mamba' with 'conda' below\nmamba install -c conda-forge -c dharpa kiara\nmamba install -c conda-forge -c dharpa kiara_plugin.core_types kiara_plugin.tabular   # optional, adjust which plugin packages you depend on, those two are quite common\n</code></pre>"},{"location":"development/#using-python-venv","title":"Using Python venv","text":"<p>Later, alligator.</p>"},{"location":"development/#check-out-the-source-code","title":"Check out the source code","text":"<p>First, fork the kiara_plugin.jupyter repository into your personal Github account.</p> <p>Then, use the resulting url (in my case: https://github.com/makkus/kiara_modules.jupyter.git) to clone the repository locally:</p> <pre><code>https://github.com/&lt;YOUR_FORKED_GITHUB_ID&gt;/kiara_plugin.jupyter\n</code></pre>"},{"location":"development/#install-the-kiara-plugin-package-into-it","title":"Install the kiara plugin package into it","text":"<pre><code>cd kiara_plugin.jupyter\npip install -e '.[all_dev]'\n</code></pre> <p>Here we use the <code>-e</code> option for the <code>pip install</code> command. This installs the local folder as a package in development mode into the current environment. Development mode makes it so that if you change any of the files in this folder, the Python environment will pick it up automatically, and whenever you run anything in this environment the latest version of your code/files are used.</p> <p>We also install a few additional requirements  (the <code>[all_dev]</code> part in the command above) that are not strictly necessary for <code>kiara</code> itself, or this package, but help with various development-related tasks.</p>"},{"location":"development/#install-some-pre-commit-check-tooling-optional","title":"Install some pre-commit check tooling (optional)","text":"<p>This step is optional, but helps with keeping the code clean and CI from failing. By installing pre-commit hooks like here, whenever you do a <code>git commit</code> in this repo, a series of checks and cleanup tasks are run, until everything is in a state that will hopefully make Github Actions not complain when you push your changes.</p> <pre><code>pre-commit install\npre-commit install --hook-type commit-msg\n</code></pre> <p>In addition to some Python-specific checks and cleanup tasks, this will also check your commit message so it's in line with the suggested format: https://www.conventionalcommits.org/en/v1.0.0/</p>"},{"location":"development/#run-kiara","title":"Run kiara","text":"<p>To check if everything works as expected and you can start adding/changing code in this repository, run any <code>kiara</code> command:</p> <pre><code>kiara operation list -t jupyter\n</code></pre> <p>If everything is set up correctly, the output of this command should contain a few operations that are implemented in this repository.</p>"},{"location":"usage/","title":"Usage","text":"<p>TO BE DONE</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>kiara_plugin<ul> <li>jupyter<ul> <li>data_types</li> <li>defaults</li> <li>entrypoints</li> <li>models</li> <li>modules</li> <li>pipelines</li> <li>renderers<ul> <li>pipeline</li> </ul> </li> <li>utils<ul> <li>graphs</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/kiara_plugin/jupyter/__init__/","title":"jupyter","text":"<p>Top-level package for kiara_plugin.jupyter.</p>"},{"location":"reference/kiara_plugin/jupyter/__init__/#kiara_plugin.jupyter-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/jupyter/__init__/#kiara_plugin.jupyter.KIARA_METADATA","title":"<code>KIARA_METADATA = {'authors': [{'name': __author__, 'email': __email__}], 'description': 'Kiara modules for: jupyter', 'references': {'source_repo': {'desc': 'The module package git repository.', 'url': 'https://github.com/DHARPA-Project/kiara_plugin.jupyter'}, 'documentation': {'desc': 'The url for the module package documentation.', 'url': 'https://DHARPA-Project.github.io/kiara_plugin.jupyter/'}}, 'tags': ['jupyter'], 'labels': {'package': 'kiara_plugin.jupyter'}}</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/jupyter/__init__/#kiara_plugin.jupyter-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/jupyter/__init__/#kiara_plugin.jupyter.get_version","title":"<code>get_version()</code>","text":"Source code in <code>kiara_plugin/jupyter/__init__.py</code> <pre><code>def get_version():\n    from pkg_resources import DistributionNotFound, get_distribution\n\n    try:\n        # Change here if project is renamed and does not equal the package name\n        dist_name = __name__\n        __version__ = get_distribution(dist_name).version\n    except DistributionNotFound:\n\n        try:\n            version_file = os.path.join(os.path.dirname(__file__), \"version.txt\")\n\n            if os.path.exists(version_file):\n                with open(version_file, encoding=\"utf-8\") as vf:\n                    __version__ = vf.read()\n            else:\n                __version__ = \"unknown\"\n\n        except (Exception):\n            pass\n\n        if __version__ is None:\n            __version__ = \"unknown\"\n\n    return __version__\n</code></pre>"},{"location":"reference/kiara_plugin/jupyter/data_types/","title":"data_types","text":"<p>This module contains the value type classes that are used in the <code>kiara_plugin.jupyter</code> package.</p>"},{"location":"reference/kiara_plugin/jupyter/defaults/","title":"defaults","text":""},{"location":"reference/kiara_plugin/jupyter/defaults/#kiara_plugin.jupyter.defaults-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/jupyter/defaults/#kiara_plugin.jupyter.defaults.OFFICIAL_KIARA_PLUGINS","title":"<code>OFFICIAL_KIARA_PLUGINS = ['core_types', 'tabular', 'onboarding', 'network_analysis', 'language_processing', 'html', 'streamlit']</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/jupyter/entrypoints/","title":"entrypoints","text":"<p>Python module that contains the entrypoints for kiara_plugin.jupyter.</p> <p>This plugin package is different, because we don't want to import kiara in our top-level package module, since we might want to do some plugin-installation before anything else.</p>"},{"location":"reference/kiara_plugin/jupyter/entrypoints/#kiara_plugin.jupyter.entrypoints-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/jupyter/entrypoints/#kiara_plugin.jupyter.entrypoints.find_modules","title":"<code>find_modules: KiaraEntryPointItem = (find_kiara_modules_under, 'kiara_plugin.jupyter.modules')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/jupyter/entrypoints/#kiara_plugin.jupyter.entrypoints.find_model_classes","title":"<code>find_model_classes: KiaraEntryPointItem = (find_kiara_model_classes_under, 'kiara_plugin.jupyter.models')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/jupyter/entrypoints/#kiara_plugin.jupyter.entrypoints.find_data_types","title":"<code>find_data_types: KiaraEntryPointItem = (find_data_types_under, 'kiara_plugin.jupyter.data_types')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/jupyter/entrypoints/#kiara_plugin.jupyter.entrypoints.find_pipelines","title":"<code>find_pipelines: KiaraEntryPointItem = (find_pipeline_base_path_for_module, 'kiara_plugin.jupyter.pipelines', KIARA_METADATA)</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/jupyter/entrypoints/#kiara_plugin.jupyter.entrypoints.find_renderer_classes","title":"<code>find_renderer_classes: KiaraEntryPointItem = (find_kiara_renderers_under, 'kiara_plugin.jupyter.renderers')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/jupyter/models/","title":"models","text":"<p>This module contains the metadata (and other) models that are used in the <code>kiara_plugin.jupyter</code> package.</p> <p>Those models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata -- but also other type of models -- that is attached to data, as well as kiara modules.</p> <p>Metadata models must be a sub-class of kiara.metadata.MetadataModel. Other models usually sub-class a pydantic BaseModel or implement custom base classes.</p>"},{"location":"reference/kiara_plugin/jupyter/modules/__init__/","title":"modules","text":""},{"location":"reference/kiara_plugin/jupyter/pipelines/__init__/","title":"pipelines","text":"<p>Default (empty) module that is used as a base path for pipelines contained in this package.</p>"},{"location":"reference/kiara_plugin/jupyter/renderers/__init__/","title":"renderers","text":""},{"location":"reference/kiara_plugin/jupyter/renderers/pipeline/","title":"pipeline","text":""},{"location":"reference/kiara_plugin/jupyter/renderers/pipeline/#kiara_plugin.jupyter.renderers.pipeline-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/jupyter/renderers/pipeline/#kiara_plugin.jupyter.renderers.pipeline.PipelineRenderer","title":"<code>PipelineRenderer</code>","text":"<p>         Bases: <code>BaseJinjaRenderer[Pipeline, RenderInputsSchema]</code></p> <p>Renders a basic Jupyter notebook from a pipeline.</p> Source code in <code>kiara_plugin/jupyter/renderers/pipeline.py</code> <pre><code>class PipelineRenderer(BaseJinjaRenderer[Pipeline, RenderInputsSchema]):\n\"\"\"Renders a basic Jupyter notebook from a pipeline.\"\"\"\n\n    _renderer_name = \"pipeline_notebook\"\n\n    def retrieve_supported_render_sources(self) -&gt; str:\n        return \"pipeline\"\n\n    def retrieve_supported_render_targets(cls) -&gt; Union[Iterable[str], str]:\n        return \"jupyter_notebook\"\n\n    def retrieve_source_transformers(self) -&gt; Iterable[SourceTransformer]:\n        return [PipelineTransformer(kiara=self._kiara)]\n\n    def retrieve_jinja_env(self) -&gt; JinjaEnv:\n\n        jinja_env = JinjaEnv(template_base=\"kiara_plugin.jupyter\")\n        return jinja_env\n\n    def get_template(self, render_config: RenderInputsSchema) -&gt; Template:\n\n        return self.get_jinja_env().get_template(\n            \"pipeline/workflow_tutorial/jupyter_notebook.ipynb.j2\"\n        )\n\n    def assemble_render_inputs(\n        self, instance: Any, render_config: RenderInputsSchema\n    ) -&gt; Mapping[str, Any]:\n\n        inputs = render_config.dict()\n        inputs[\"pipeline\"] = instance\n        return inputs\n\n    def _post_process(self, rendered: str) -&gt; str:\n\n        is_notebook = True\n        if is_notebook:\n            import jupytext\n\n            notebook = jupytext.reads(rendered, fmt=\"py:percent\")\n            converted = jupytext.writes(notebook, fmt=\"notebook\")\n            return converted\n        else:\n            try:\n                import black\n                from black import Mode  # type: ignore\n\n                cleaned = black.format_str(rendered, mode=Mode())\n                return cleaned\n\n            except Exception as e:\n                log_message(\n                    f\"Could not format python code, 'black' not in virtual environment: {e}.\"\n                )\n                return rendered\n</code></pre>"},{"location":"reference/kiara_plugin/jupyter/renderers/pipeline/#kiara_plugin.jupyter.renderers.pipeline.PipelineRenderer-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/jupyter/renderers/pipeline/#kiara_plugin.jupyter.renderers.pipeline.PipelineRenderer.retrieve_supported_render_sources","title":"<code>retrieve_supported_render_sources() -&gt; str</code>","text":"Source code in <code>kiara_plugin/jupyter/renderers/pipeline.py</code> <pre><code>def retrieve_supported_render_sources(self) -&gt; str:\n    return \"pipeline\"\n</code></pre>"},{"location":"reference/kiara_plugin/jupyter/renderers/pipeline/#kiara_plugin.jupyter.renderers.pipeline.PipelineRenderer.retrieve_supported_render_targets","title":"<code>retrieve_supported_render_targets() -&gt; Union[Iterable[str], str]</code>","text":"Source code in <code>kiara_plugin/jupyter/renderers/pipeline.py</code> <pre><code>def retrieve_supported_render_targets(cls) -&gt; Union[Iterable[str], str]:\n    return \"jupyter_notebook\"\n</code></pre>"},{"location":"reference/kiara_plugin/jupyter/renderers/pipeline/#kiara_plugin.jupyter.renderers.pipeline.PipelineRenderer.retrieve_source_transformers","title":"<code>retrieve_source_transformers() -&gt; Iterable[SourceTransformer]</code>","text":"Source code in <code>kiara_plugin/jupyter/renderers/pipeline.py</code> <pre><code>def retrieve_source_transformers(self) -&gt; Iterable[SourceTransformer]:\n    return [PipelineTransformer(kiara=self._kiara)]\n</code></pre>"},{"location":"reference/kiara_plugin/jupyter/renderers/pipeline/#kiara_plugin.jupyter.renderers.pipeline.PipelineRenderer.retrieve_jinja_env","title":"<code>retrieve_jinja_env() -&gt; JinjaEnv</code>","text":"Source code in <code>kiara_plugin/jupyter/renderers/pipeline.py</code> <pre><code>def retrieve_jinja_env(self) -&gt; JinjaEnv:\n\n    jinja_env = JinjaEnv(template_base=\"kiara_plugin.jupyter\")\n    return jinja_env\n</code></pre>"},{"location":"reference/kiara_plugin/jupyter/renderers/pipeline/#kiara_plugin.jupyter.renderers.pipeline.PipelineRenderer.get_template","title":"<code>get_template(render_config: RenderInputsSchema) -&gt; Template</code>","text":"Source code in <code>kiara_plugin/jupyter/renderers/pipeline.py</code> <pre><code>def get_template(self, render_config: RenderInputsSchema) -&gt; Template:\n\n    return self.get_jinja_env().get_template(\n        \"pipeline/workflow_tutorial/jupyter_notebook.ipynb.j2\"\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/jupyter/renderers/pipeline/#kiara_plugin.jupyter.renderers.pipeline.PipelineRenderer.assemble_render_inputs","title":"<code>assemble_render_inputs(instance: Any, render_config: RenderInputsSchema) -&gt; Mapping[str, Any]</code>","text":"Source code in <code>kiara_plugin/jupyter/renderers/pipeline.py</code> <pre><code>def assemble_render_inputs(\n    self, instance: Any, render_config: RenderInputsSchema\n) -&gt; Mapping[str, Any]:\n\n    inputs = render_config.dict()\n    inputs[\"pipeline\"] = instance\n    return inputs\n</code></pre>"},{"location":"reference/kiara_plugin/jupyter/utils/__init__/","title":"utils","text":""},{"location":"reference/kiara_plugin/jupyter/utils/__init__/#kiara_plugin.jupyter.utils-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/jupyter/utils/__init__/#kiara_plugin.jupyter.utils-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/jupyter/utils/__init__/#kiara_plugin.jupyter.utils.ensure_kiara_plugins","title":"<code>ensure_kiara_plugins(*plugins, update: bool = False)</code>","text":"<p>Ensure that the specified packages are installed.</p> <p>Parameters:</p> Name Type Description Default <code>package_names</code> <p>The names of the packages to install.</p> required <code>update</code> <code>bool</code> <p>If True, update the packages if they are already installed</p> <code>False</code> <p>Returns:</p> Type Description <p>'None' if nothing was done, else a string containing information about what was installed</p> Source code in <code>kiara_plugin/jupyter/utils/__init__.py</code> <pre><code>def ensure_kiara_plugins(*plugins, update: bool = False):\n\"\"\"Ensure that the specified packages are installed.\n\n    Arguments:\n      package_names: The names of the packages to install.\n      update: If True, update the packages if they are already installed\n\n    Returns:\n        'None' if nothing was done, else a string containing information about what was installed\n    \"\"\"\n\n    installed_packages: Dict[str, str] = {}\n    all_packages = packages_distributions()\n\n    for name, pkgs in all_packages.items():\n        for pkg in pkgs:\n            dist = distribution(pkg)\n            if (\n                pkg in installed_packages.keys()\n                and installed_packages[pkg] != dist.version\n            ):\n                raise Exception(\n                    f\"Multiple versions of package '{pkg}' available: {installed_packages[pkg]} and {dist.version}.\"\n                )\n            installed_packages[pkg] = dist.version\n\n    if not plugins:\n        plugins = tuple(OFFICIAL_KIARA_PLUGINS)\n\n    if not update:\n        plugin_packages: List[str] = []\n        pkgs = [p.replace(\"_\", \"-\") for p in installed_packages.keys()]\n        for package_name in plugins:\n            if package_name.startswith(\"git:\"):\n                package_name = package_name.replace(\"git:\", \"\")\n                git = True\n            else:\n                git = False\n            package_name = package_name.replace(\"_\", \"-\")\n            if not package_name.startswith(\"kiara-plugin.\"):\n                package_name = f\"kiara-plugin.{package_name}\"\n\n            if git or package_name.replace(\"_\", \"-\") not in pkgs:\n                if git:\n                    package_name = package_name.replace(\"-\", \"_\")\n                    plugin_packages.append(\n                        f\"git+https://x:x@github.com/DHARPA-project/{package_name}@develop\"\n                    )\n                else:\n                    plugin_packages.append(package_name)\n    else:\n        plugin_packages = list(plugins)\n\n    in_jupyter = \"google.colab\" in sys.modules or \"jupyter_client\" in sys.modules\n    if not in_jupyter:\n        raise Exception(\"No juptyer environment detected.\")\n\n    if not plugin_packages:\n        # nothing to do\n        return None\n\n    cmd = [\"-q\", \"--isolated\", \"install\"]\n    if update:\n        cmd.append(\"--upgrade\")\n    cmd.extend(plugin_packages)\n\n    from IPython import get_ipython\n    from rich.console import Console\n\n    console = Console()\n    with console.status(\"Installing kiara plugins...\"):\n        ipython = get_ipython()\n        cmd_str = f\"sc -l stdout = {sys.executable} -m pip {' '.join(cmd)}\"\n        ipython.magic(cmd_str)\n\n    importlib.invalidate_caches()\n\n    msg = \"Installed packages:\\n\\n\"\n    for p in plugin_packages:\n        msg += f\" - {p}\\n\"\n    msg = f\"{msg}\\n\\nDepending on the state of your current environment, you might see error messages below, in which case you'll have to restart the jupyter kernel manually.\"\n    return Panel(Markdown(msg), title=\"kiara plugin(s) installed\", title_align=\"left\")\n</code></pre>"},{"location":"reference/kiara_plugin/jupyter/utils/graphs/","title":"graphs","text":""},{"location":"reference/kiara_plugin/jupyter/utils/graphs/#kiara_plugin.jupyter.utils.graphs-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/jupyter/utils/graphs/#kiara_plugin.jupyter.utils.graphs.graph_widget","title":"<code>graph_widget(pipeline: Union[PipelineStructure, PipelineConfig, Pipeline], graph_type: Literal['data-flow', 'data-flow-simple', 'execution'] = 'execution')</code>","text":"Source code in <code>kiara_plugin/jupyter/utils/graphs.py</code> <pre><code>def graph_widget(\n    pipeline: Union[PipelineStructure, PipelineConfig, Pipeline],\n    graph_type: Literal[\"data-flow\", \"data-flow-simple\", \"execution\"] = \"execution\",\n):\n\n    if hasattr(pipeline, \"structure\"):\n        pipeline = pipeline.structure  # type: ignore\n\n    try:\n        import ipydagred3 as ipydagred3\n    except Exception:\n        raise Exception(\n            \"ipydagred3 not available, please install it manually into the current virtualenv\"\n        )\n\n    g = ipydagred3.Graph()\n    if graph_type == \"execution\":\n        graph = pipeline.execution_graph  # type: ignore\n    elif graph_type == \"data-flow\":\n        graph = pipeline.data_flow_graph  # type: ignore\n    elif graph_type == \"data-flow-simple\":\n        graph = pipeline.data_flow_graph_simple  # type: ignore\n    else:\n        raise Exception(f\"Invalid graph type requested: '{graph_type}'\")\n\n    nodes_set = set()\n    for node in graph.nodes:\n        nodes_set.add(str(node))\n        g.setNode(str(node))\n\n    for edge in graph.edges:\n        e = str(edge[0])\n        if e not in nodes_set:\n            print(\"MISSING\")\n            print(e)\n        e2 = str(edge[1])\n        if e2 not in nodes_set:\n            print(\"MISSING 2\")\n            print(e2)\n        g.setEdge(e, e2)\n\n    widget = ipydagred3.DagreD3Widget(graph=g)\n    return widget\n</code></pre>"}]}