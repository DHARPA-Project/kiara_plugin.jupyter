{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"kiara plugin: jupyter","text":"<p>This package contains a set of commonly used/useful modules, pipelines, types and metadata schemas for Kiara.</p>"},{"location":"#description","title":"Description","text":"<p>Jupyter integration for kiara</p>"},{"location":"#package-content","title":"Package content","text":""},{"location":"#module_types","title":"module_types","text":"<ul> <li><code>jupyter.example</code>: A very simple example module; concatenate two strings.</li> </ul>"},{"location":"#operations","title":"operations","text":"<ul> <li><code>jupyter.example</code>: A very simple example module; concatenate two strings.</li> </ul>"},{"location":"#links","title":"Links","text":"<ul> <li>Documentation: https://DHARPA-Project.github.io/kiara_plugin.jupyter</li> <li>Code: https://github.com/DHARPA-Project/kiara_plugin.jupyter</li> </ul>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Package contents</li> <li>Usage</li> <li>Development</li> <li>API reference</li> </ul>"},{"location":"development/","title":"Development","text":""},{"location":"development/#prepare-development-environment","title":"Prepare development environment","text":""},{"location":"development/#using-conda-recommended","title":"Using conda (recommended)","text":"<pre><code>conda create -n jupyter python=3.9\nconda activate jupyter\nconda install -c conda-forge mamba   # this is optional, but makes everything install related much faster, if you don't use it, replace 'mamba' with 'conda' below\nmamba install -c conda-forge -c dharpa kiara\nmamba install -c conda-forge -c dharpa kiara_plugin.core_types kiara_plugin.tabular   # optional, adjust which plugin packages you depend on, those two are quite common\n</code></pre>"},{"location":"development/#using-python-venv","title":"Using Python venv","text":"<p>Later, alligator.</p>"},{"location":"development/#check-out-the-source-code","title":"Check out the source code","text":"<p>First, fork the kiara_plugin.jupyter repository into your personal Github account.</p> <p>Then, use the resulting url (in my case: https://github.com/makkus/kiara_modules.jupyter.git) to clone the repository locally:</p> <pre><code>https://github.com/&lt;YOUR_FORKED_GITHUB_ID&gt;/kiara_plugin.jupyter\n</code></pre>"},{"location":"development/#install-the-kiara-plugin-package-into-it","title":"Install the kiara plugin package into it","text":"<pre><code>cd kiara_plugin.jupyter\npip install -e '.[all_dev]'\n</code></pre> <p>Here we use the <code>-e</code> option for the <code>pip install</code> command. This installs the local folder as a package in development mode into the current environment. Development mode makes it so that if you change any of the files in this folder, the Python environment will pick it up automatically, and whenever you run anything in this environment the latest version of your code/files are used.</p> <p>We also install a few additional requirements  (the <code>[all_dev]</code> part in the command above) that are not strictly necessary for <code>kiara</code> itself, or this package, but help with various development-related tasks.</p>"},{"location":"development/#install-some-pre-commit-check-tooling-optional","title":"Install some pre-commit check tooling (optional)","text":"<p>This step is optional, but helps with keeping the code clean and CI from failing. By installing pre-commit hooks like here, whenever you do a <code>git commit</code> in this repo, a series of checks and cleanup tasks are run, until everything is in a state that will hopefully make Github Actions not complain when you push your changes.</p> <pre><code>pre-commit install\npre-commit install --hook-type commit-msg\n</code></pre> <p>In addition to some Python-specific checks and cleanup tasks, this will also check your commit message so it's in line with the suggested format: https://www.conventionalcommits.org/en/v1.0.0/</p>"},{"location":"development/#run-kiara","title":"Run kiara","text":"<p>To check if everything works as expected and you can start adding/changing code in this repository, run any <code>kiara</code> command:</p> <pre><code>kiara operation list -t jupyter\n</code></pre> <p>If everything is set up correctly, the output of this command should contain a few operations that are implemented in this repository.</p>"},{"location":"usage/","title":"Usage","text":"<p>TO BE DONE</p>"},{"location":"info/SUMMARY/","title":"SUMMARY","text":"<ul> <li>module_types</li> <li>operations</li> </ul>"},{"location":"info/module_types/","title":"module_types","text":""},{"location":"info/module_types/#kiara_info.module_types.jupyter.example","title":"<code>jupyter.example</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    A very simple example module; concatenate two         \n                          strings.                                              \n                          The purpose of this modules is to show the main       \n                          elements of a                                         \n                          [KiaraModule][kiara.modules.KiaraModule]:             \n                        \u2022 the (optional) configuration class: must inherit   \n                       from                                               \n                       [KiaraModuleConfig][kiara.modules.KiaraModuleCo\u2026   \n                       and the config class must be set as the            \n                       _config_cls attribute on the KiaraModule class.    \n                       Configuration values can be retrieved via the      \n                       [self.get_config_value(key)][kiara.modules.Kiar\u2026   \n                       method                                             \n                        \u2022 the inputs description: must return a              \n                       dictionary, containing the input name(s) as        \n                       keys, and another dictionary containing            \n                       type_name information and documentation about      \n                       the input data as value                            \n                        \u2022 the outputs description: must return a             \n                       dictionary, containing the output name(s) as       \n                       keys, and another dictionary containing            \n                       type_name information and documentation about      \n                       the output data as value                           \n                        \u2022 the process method: this is where the actual       \n                       work gets done. Input data can be accessed via     \n                       inputs.get_value_data(key), results can be set     \n                       with the outputs.set_value(key, value) method      \n                          Example:                                              \n                        This example module can be tested on the             \n  commandline with the ``kiara run`` command:          \n  ```                                                  \n  kiara run core_types.example text_1=\"xxx\"            \n  text_2=\"yyy\"                                         \n  ```                                                  \n Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                    \n Context                                                                        \n  Tags         jupyter                                  \n                        Labels       package: kiara_plugin.jupyter            \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                          separator   string   The         no         \" - \"     \n                                               seperator                        \n                                               between                          \n                                               the two                          \n                                               strings.                         \n                       Python class                                                                   \n  python_class_name    ExampleModule                    \n                        python_module_name   kiara_plugin.jupyter.modules     \n                        full_name            kiara_plugin.jupyter.modules.\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       def process(self, inputs: ValueMap, outputs: Value\u2026   \n     separator = self.get_config_value(\"separator\")    \n     text_1 = inputs.get_value_data(\"text_1\")          \n     text_2 = inputs.get_value_data(\"text_2\")          \n     result = text_1 + separator + text_2              \n     outputs.set_value(\"text\", result)                 \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/operations/","title":"operations","text":""},{"location":"info/operations/#kiara_info.operations.jupyter.example","title":"<code>jupyter.example</code>","text":"Documentation <p>A very simple example module; concatenate two strings.</p> <p>The purpose of this modules is to show the main elements of a [<code>KiaraModule</code>][kiara.modules.KiaraModule]:</p> <ul> <li>*the (optional) configuration class*: must inherit from [<code>KiaraModuleConfig</code>][kiara.modules.KiaraModuleConfig], and the config class must be set as the <code>_config_cls</code> attribute    on the <code>KiaraModule</code> class. Configuration values can be retrieved via the [<code>self.get_config_value(key)</code>][kiara.modules.KiaraModule.get_config_value] method</li> <li>*the inputs description*: must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information    and documentation about the input data as value</li> <li>*the outputs description*: must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information    and documentation about the output data as value</li> <li>*the <code>process</code> method*: this is where the actual work gets done. Input data can be accessed via <code>inputs.get_value_data(key)</code>, results    can be set with the <code>outputs.set_value(key, value)</code> method</li> </ul> <p>Example:</p> <pre><code>This example module can be tested on the commandline with the ``kiara run`` command:\n\n```\nkiara run core_types.example text_1=\"xxx\" text_2=\"yyy\"\n```\n</code></pre> Inputs field name type description required default text_1 string The first text. yes text_2 string The second text. yes Outputs field name type description required default text string The concatenated text. yes"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>kiara_plugin<ul> <li>jupyter<ul> <li>data_types</li> <li>defaults</li> <li>entrypoints</li> <li>models</li> <li>modules</li> <li>pipelines</li> <li>utils</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/kiara_plugin/jupyter/__init__/","title":"jupyter","text":"<p>Top-level package for kiara_plugin.jupyter.</p>"},{"location":"reference/kiara_plugin/jupyter/__init__/#kiara_plugin.jupyter-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/jupyter/__init__/#kiara_plugin.jupyter.KIARA_METADATA","title":"<code>KIARA_METADATA = {'authors': [{'name': __author__, 'email': __email__}], 'description': 'Kiara modules for: jupyter', 'references': {'source_repo': {'desc': 'The module package git repository.', 'url': 'https://github.com/DHARPA-Project/kiara_plugin.jupyter'}, 'documentation': {'desc': 'The url for the module package documentation.', 'url': 'https://DHARPA-Project.github.io/kiara_plugin.jupyter/'}}, 'tags': ['jupyter'], 'labels': {'package': 'kiara_plugin.jupyter'}}</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/jupyter/__init__/#kiara_plugin.jupyter-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/jupyter/__init__/#kiara_plugin.jupyter.get_version","title":"<code>get_version()</code>","text":"Source code in <code>kiara_plugin/jupyter/__init__.py</code> <pre><code>def get_version():\n    from pkg_resources import DistributionNotFound, get_distribution\n\n    try:\n        # Change here if project is renamed and does not equal the package name\n        dist_name = __name__\n        __version__ = get_distribution(dist_name).version\n    except DistributionNotFound:\n\n        try:\n            version_file = os.path.join(os.path.dirname(__file__), \"version.txt\")\n\n            if os.path.exists(version_file):\n                with open(version_file, encoding=\"utf-8\") as vf:\n                    __version__ = vf.read()\n            else:\n                __version__ = \"unknown\"\n\n        except (Exception):\n            pass\n\n        if __version__ is None:\n            __version__ = \"unknown\"\n\n    return __version__\n</code></pre>"},{"location":"reference/kiara_plugin/jupyter/data_types/","title":"data_types","text":"<p>This module contains the value type classes that are used in the <code>kiara_plugin.jupyter</code> package.</p>"},{"location":"reference/kiara_plugin/jupyter/defaults/","title":"defaults","text":""},{"location":"reference/kiara_plugin/jupyter/defaults/#kiara_plugin.jupyter.defaults-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/jupyter/defaults/#kiara_plugin.jupyter.defaults.OFFICIAL_KIARA_PLUGINS","title":"<code>OFFICIAL_KIARA_PLUGINS = ['core_types', 'tabular', 'onboarding', 'network_analysis', 'language_processing']</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/jupyter/entrypoints/","title":"entrypoints","text":"<p>Python module that contains the entrypoints for kiara_plugin.jupyter.</p> <p>This plugin package is different, because we don't want to import kiara in our top-level package module, since we might want to do some plugin-installation before anything else.</p>"},{"location":"reference/kiara_plugin/jupyter/entrypoints/#kiara_plugin.jupyter.entrypoints-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/jupyter/entrypoints/#kiara_plugin.jupyter.entrypoints.find_modules","title":"<code>find_modules: KiaraEntryPointItem = (find_kiara_modules_under, 'kiara_plugin.jupyter.modules')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/jupyter/entrypoints/#kiara_plugin.jupyter.entrypoints.find_model_classes","title":"<code>find_model_classes: KiaraEntryPointItem = (find_kiara_model_classes_under, 'kiara_plugin.jupyter.models')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/jupyter/entrypoints/#kiara_plugin.jupyter.entrypoints.find_data_types","title":"<code>find_data_types: KiaraEntryPointItem = (find_data_types_under, 'kiara_plugin.jupyter.data_types')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/jupyter/entrypoints/#kiara_plugin.jupyter.entrypoints.find_pipelines","title":"<code>find_pipelines: KiaraEntryPointItem = (find_pipeline_base_path_for_module, 'kiara_plugin.jupyter.pipelines', KIARA_METADATA)</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/jupyter/models/","title":"models","text":"<p>This module contains the metadata (and other) models that are used in the <code>kiara_plugin.jupyter</code> package.</p> <p>Those models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata -- but also other type of models -- that is attached to data, as well as kiara modules.</p> <p>Metadata models must be a sub-class of kiara.metadata.MetadataModel. Other models usually sub-class a pydantic BaseModel or implement custom base classes.</p>"},{"location":"reference/kiara_plugin/jupyter/utils/","title":"utils","text":""},{"location":"reference/kiara_plugin/jupyter/utils/#kiara_plugin.jupyter.utils-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/jupyter/utils/#kiara_plugin.jupyter.utils-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/jupyter/utils/#kiara_plugin.jupyter.utils.ensure_kiara_plugins","title":"<code>ensure_kiara_plugins(*plugins, update: bool = False)</code>","text":"<p>Ensure that the specified packages are installed.</p> <p>Parameters:</p> Name Type Description Default <code>package_names</code> <p>The names of the packages to install.</p> required <code>update</code> <code>bool</code> <p>If True, update the packages if they are already installed</p> <code>False</code> <p>Returns:</p> Type Description <p>'None' if nothing was done, else a string containing information about what was installed</p> Source code in <code>kiara_plugin/jupyter/utils.py</code> <pre><code>def ensure_kiara_plugins(*plugins, update: bool = False):\n\"\"\"Ensure that the specified packages are installed.\n\n    Arguments:\n      package_names: The names of the packages to install.\n      update: If True, update the packages if they are already installed\n\n    Returns:\n        'None' if nothing was done, else a string containing information about what was installed\n    \"\"\"\n\n    installed_packages: Dict[str, str] = {}\n    all_packages = packages_distributions()\n\n    for name, pkgs in all_packages.items():\n        for pkg in pkgs:\n            dist = distribution(pkg)\n            if (\n                pkg in installed_packages.keys()\n                and installed_packages[pkg] != dist.version\n            ):\n                raise Exception(\n                    f\"Multiple versions of package '{pkg}' available: {installed_packages[pkg]} and {dist.version}.\"\n                )\n            installed_packages[pkg] = dist.version\n\n    if not plugins:\n        plugins = tuple(OFFICIAL_KIARA_PLUGINS)\n\n    if not update:\n        plugin_packages: List[str] = []\n        pkgs = [p.replace(\"_\", \"-\") for p in installed_packages.keys()]\n        for package_name in plugins:\n            if package_name.startswith(\"git:\"):\n                package_name = package_name.replace(\"git:\", \"\")\n                git = True\n            else:\n                git = False\n            package_name = package_name.replace(\"_\", \"-\")\n            if not package_name.startswith(\"kiara-plugin.\"):\n                package_name = f\"kiara-plugin.{package_name}\"\n\n            if git or package_name.replace(\"_\", \"-\") not in pkgs:\n                if git:\n                    package_name = package_name.replace(\"-\", \"_\")\n                    plugin_packages.append(\n                        f\"git+https://x:x@github.com/DHARPA-project/{package_name}@develop\"\n                    )\n                else:\n                    plugin_packages.append(package_name)\n    else:\n        plugin_packages = list(plugins)\n\n    in_jupyter = \"google.colab\" in sys.modules or \"jupyter_client\" in sys.modules\n    if not in_jupyter:\n        raise Exception(\"No juptyer environment detected.\")\n\n    if not plugin_packages:\n        # nothing to do\n        return None\n\n    cmd = [\"-q\", \"--isolated\", \"install\"]\n    if update:\n        cmd.append(\"--upgrade\")\n    cmd.extend(plugin_packages)\n\n    from IPython import get_ipython\n    from rich.console import Console\n\n    console = Console()\n    with console.status(\"Installing kiara plugins...\"):\n        ipython = get_ipython()\n        cmd_str = f\"sc -l stdout = {sys.executable} -m pip {' '.join(cmd)}\"\n        ipython.magic(cmd_str)\n\n    importlib.invalidate_caches()\n\n    msg = \"Installed packages:\\n\\n\"\n    for p in plugin_packages:\n        msg += f\" - {p}\\n\"\n    msg = f\"{msg}\\n\\nDepending on the state of your current environment, you might see error messages below, in which case you'll have to restart the jupyter kernel manually.\"\n    return Panel(Markdown(msg), title=\"kiara plugin(s) installed\", title_align=\"left\")\n</code></pre>"},{"location":"reference/kiara_plugin/jupyter/modules/__init__/","title":"modules","text":""},{"location":"reference/kiara_plugin/jupyter/modules/__init__/#kiara_plugin.jupyter.modules-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/jupyter/modules/__init__/#kiara_plugin.jupyter.modules.ExampleModuleConfig","title":"<code>ExampleModuleConfig</code>","text":"<p>         Bases: <code>KiaraModuleConfig</code></p> Source code in <code>kiara_plugin/jupyter/modules/__init__.py</code> <pre><code>class ExampleModuleConfig(KiaraModuleConfig):\n\n    separator: str = Field(\n        description=\"The seperator between the two strings.\", default=\" - \"\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/jupyter/modules/__init__/#kiara_plugin.jupyter.modules.ExampleModuleConfig-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/jupyter/modules/__init__/#kiara_plugin.jupyter.modules.ExampleModuleConfig.separator","title":"<code>separator: str = Field(description='The seperator between the two strings.', default=' - ')</code>  <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/jupyter/modules/__init__/#kiara_plugin.jupyter.modules.ExampleModule","title":"<code>ExampleModule</code>","text":"<p>         Bases: <code>KiaraModule</code></p> <p>A very simple example module; concatenate two strings.</p> <p>The purpose of this modules is to show the main elements of a <code>KiaraModule</code>:</p> <ul> <li>the (optional) configuration class: must inherit from <code>KiaraModuleConfig</code>, and the config class must be set as the <code>_config_cls</code> attribute      on the <code>KiaraModule</code> class. Configuration values can be retrieved via the <code>self.get_config_value(key)</code> method</li> <li>the inputs description: must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information      and documentation about the input data as value</li> <li>the outputs description: must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information      and documentation about the output data as value</li> <li>the <code>process</code> method: this is where the actual work gets done. Input data can be accessed via <code>inputs.get_value_data(key)</code>, results      can be set with the <code>outputs.set_value(key, value)</code> method</li> </ul> Example <p>This example module can be tested on the commandline with the <code>kiara run</code> command:</p> <pre><code>kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\"\n</code></pre> Source code in <code>kiara_plugin/jupyter/modules/__init__.py</code> <pre><code>class ExampleModule(KiaraModule):\n\"\"\"A very simple example module; concatenate two strings.\n\n    The purpose of this modules is to show the main elements of a [`KiaraModule`][kiara.modules.KiaraModule]:\n\n    - ***the (optional) configuration class***: must inherit from [`KiaraModuleConfig`][kiara.modules.KiaraModuleConfig], and the config class must be set as the `_config_cls` attribute\n         on the `KiaraModule` class. Configuration values can be retrieved via the [`self.get_config_value(key)`][kiara.modules.KiaraModule.get_config_value] method\n    - ***the inputs description***: must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information\n         and documentation about the input data as value\n    - ***the outputs description***: must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information\n         and documentation about the output data as value\n    - ***the ``process`` method***: this is where the actual work gets done. Input data can be accessed via ``inputs.get_value_data(key)``, results\n         can be set with the ``outputs.set_value(key, value)`` method\n\n    Example:\n\n        This example module can be tested on the commandline with the ``kiara run`` command:\n\n        ```\n        kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\"\n        ```\n    \"\"\"\n\n    _config_cls = ExampleModuleConfig\n    _module_type_name = \"jupyter.example\"\n\n    def create_inputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        inputs = {\n            \"text_1\": {\"type\": \"string\", \"doc\": \"The first text.\"},\n            \"text_2\": {\"type\": \"string\", \"doc\": \"The second text.\"},\n        }\n\n        return inputs\n\n    def create_outputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        outputs = {\n            \"text\": {\n                \"type\": \"string\",\n                \"doc\": \"The concatenated text.\",\n            }\n        }\n        return outputs\n\n    def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n        separator = self.get_config_value(\"separator\")\n\n        text_1 = inputs.get_value_data(\"text_1\")\n        text_2 = inputs.get_value_data(\"text_2\")\n\n        result = text_1 + separator + text_2\n        outputs.set_value(\"text\", result)\n</code></pre>"},{"location":"reference/kiara_plugin/jupyter/modules/__init__/#kiara_plugin.jupyter.modules.ExampleModule-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/jupyter/modules/__init__/#kiara_plugin.jupyter.modules.ExampleModule._config_cls","title":"<code>_config_cls = ExampleModuleConfig</code>  <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/jupyter/modules/__init__/#kiara_plugin.jupyter.modules.ExampleModule-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/jupyter/modules/__init__/#kiara_plugin.jupyter.modules.ExampleModule.create_inputs_schema","title":"<code>create_inputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>kiara_plugin/jupyter/modules/__init__.py</code> <pre><code>def create_inputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    inputs = {\n        \"text_1\": {\"type\": \"string\", \"doc\": \"The first text.\"},\n        \"text_2\": {\"type\": \"string\", \"doc\": \"The second text.\"},\n    }\n\n    return inputs\n</code></pre>"},{"location":"reference/kiara_plugin/jupyter/modules/__init__/#kiara_plugin.jupyter.modules.ExampleModule.create_outputs_schema","title":"<code>create_outputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>kiara_plugin/jupyter/modules/__init__.py</code> <pre><code>def create_outputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    outputs = {\n        \"text\": {\n            \"type\": \"string\",\n            \"doc\": \"The concatenated text.\",\n        }\n    }\n    return outputs\n</code></pre>"},{"location":"reference/kiara_plugin/jupyter/modules/__init__/#kiara_plugin.jupyter.modules.ExampleModule.process","title":"<code>process(inputs: ValueMap, outputs: ValueMap) -&gt; None</code>","text":"Source code in <code>kiara_plugin/jupyter/modules/__init__.py</code> <pre><code>def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n    separator = self.get_config_value(\"separator\")\n\n    text_1 = inputs.get_value_data(\"text_1\")\n    text_2 = inputs.get_value_data(\"text_2\")\n\n    result = text_1 + separator + text_2\n    outputs.set_value(\"text\", result)\n</code></pre>"},{"location":"reference/kiara_plugin/jupyter/pipelines/__init__/","title":"pipelines","text":"<p>Default (empty) module that is used as a base path for pipelines contained in this package.</p>"}]}